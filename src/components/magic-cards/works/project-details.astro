---
// This component will display detailed information about each project
// In a real implementation, you might fetch this data from a CMS or local files

const projects = [
  {
    id: 1,
    title: "Portfolio Website",
    description: "A personal portfolio website built with modern technologies to showcase my work and skills.",
    technologies: ["astro", "tailwind", "typescript"],
    image: "/images/projects/portfolio.jpg",
    link: "#",
    github: "#",
    details: "This project was built to showcase my work and expertise in web development. It features a responsive design, dark mode support, and interactive elements."
  },
  {
    id: 2,
    title: "E-commerce Platform",
    description: "A full-featured e-commerce solution with product catalog, cart, and checkout functionality.",
    technologies: ["react", "node", "typescript"],
    image: "/images/projects/ecommerce.jpg",
    link: "#",
    github: "#",
    details: "This e-commerce platform includes user authentication, product management, shopping cart functionality, and secure payment processing integration."
  },
  {
    id: 3,
    title: "Task Management App",
    description: "A productivity application for managing tasks, projects, and team collaboration.",
    technologies: ["vue", "tailwind", "node"],
    image: "/images/projects/taskapp.jpg",
    link: "#",
    github: "#",
    details: "This task management application helps users organize their work, set priorities, and collaborate with team members. It includes features like drag-and-drop task organization, due dates, and progress tracking."
  },
];
---

<div class="space-y-8 md:space-y-16">
  {projects.map((project) => (
    <div class="bg-white dark:bg-zinc-900 rounded-lg overflow-hidden shadow-md project-card" data-tech-ids={project.technologies.join(',')}>
      <div class="aspect-video w-full">
        <img src={project.image} alt={project.title} class="object-cover w-full h-full" />
      </div>
      
      <div class="p-4 md:p-6">
        <h2 class="text-xl md:text-2xl font-bold mb-2">{project.title}</h2>
        <p class="text-gray-600 dark:text-gray-300 mb-3 md:mb-4 text-sm md:text-base">{project.description}</p>
        
        <div class="mb-3 md:mb-4">
          <h3 class="text-base md:text-lg font-semibold mb-1 md:mb-2">Details</h3>
          <p class="text-sm md:text-base">{project.details}</p>
        </div>
        
        <div class="flex flex-col sm:flex-row gap-2 sm:gap-3">
          <a href={project.link} target="_blank" rel="noopener noreferrer" 
             class="bg-foreground text-background px-3 py-1.5 md:px-4 md:py-2 rounded text-center text-sm md:text-base hover:bg-foreground/90 transition">
            View Project
          </a>
          <a href={project.github} target="_blank" rel="noopener noreferrer"
             class="bg-secondary text-secondary-foreground px-3 py-1.5 md:px-4 md:py-2 rounded text-center text-sm md:text-base hover:bg-secondary/90 transition">
            GitHub
          </a>
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  // Client-side code to trigger the 'projectInView' event when a project is scrolled into view
  // This would use Intersection Observer in a real implementation
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('.project-card');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const techIds = (entry.target as HTMLElement).dataset.techIds?.split(',') || [];
          document.dispatchEvent(new CustomEvent('projectInView', {
            detail: { technologies: techIds }
          }));
        }
      });
    }, { threshold: 0.5 });
    
    projectCards.forEach(card => observer.observe(card));
  });
</script> 